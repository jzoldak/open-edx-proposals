===============================
OEP-0007: Migrating to Python 3
===============================
+---------------+-------------------------------------------+
| OEP           | :doc:`OEP-7 </oeps/oep-0007>`             |
+---------------+-------------------------------------------+
| Title         | Migrating to Python 3                     |
+---------------+-------------------------------------------+
| Last-Modified | 2016-08-12                                |
+---------------+-------------------------------------------+
| Author        | Cliff Dyer <cdyer@edx.org                 |
+---------------+-------------------------------------------+
| Arbiter       |                                           |
+---------------+-------------------------------------------+
| Status        | Draft                                     |
+---------------+-------------------------------------------+
| Type          |                                           |
+---------------+-------------------------------------------+
| Created       | 2016-08-12                                |
+---------------+-------------------------------------------+
| Resolution    |                                           |
+---------------+-------------------------------------------+

Abstract
========

With primary development of Python occurring on Python 3, and with Python 2
scheduled for end-of-life in 2020, edX needs to plan for a transition of our
code to Python 3.  Open edX is a large project, spanning many applications over
even more github repos, with even more dependencies on third party libraries
that may or may not support python 3.  This document outlines how we plan to
scope the problem, socialize understanding of the differences between versions
of python, migrate our code, and work with our Open edX community to ensure
that the process is as painless as possible, and meets the needs of our
stakeholders.

Rationale
=========

    * Python 2 will only receive support from the python core devs until 2020.
    * New features are being made available on python 3 first, and are
      sometimes backported to Python 2.
    * Major language performance work is being done on Python 3 only.[citation
      required]
    * Almost all major libraries now support python 3.
    * We can approach the problem now at a relaxed pace, or deal with it in a
      panic later, diverting valuable resources from other important work.
    * The longer we wait, the more code we will produce that needs to be
      migrated.

Scope
=====

There are several areas of work that need to be done

* Setting policy
* Changing coding practice.
* Migrating existing code.
* Deploying edx.org services with Python 3.
* Deprecating python 2 support.

These areas have certain dependencies between them, e.g., we cannot deploy a
service under python 3 until all of its code has been migrated.  However, this
should not be taken as a chronological list of tasks.  We may begin deprecating
python 2 support on certain repositories before existing code in other
repositories has been migrated.

Setting Policy
--------------

All new python 2 code should be written to be compatible with python 3.
We will follow the compatibility guidelines at
http://python-future.org/compatible_idioms.html.  (FIXME: We should prefer six)

All files should have the main `__future__` imports at the top to regularize
some behaviors that differ by default between python 2 and 3. `from
__future__ import absolute_import` forbid the use of implicit relative
imports and `from __future__ import print_function` to make print a function
instead of a statement.  `from __future__ import division` will make
single-slash division (`a / b`) always perform floating point division, and
double-slash division (`a // b`) always truncate down.


Text handling is the largest area of difficulty in porting python.  Where
possible, we will use unambiguous unicode or byte literals.  In those cases
where ambiguity is required (such as working with libraries like `csv` which
require byte strings in python 2 and unicode strings in python 3, we should
isolate the need for ambiguity as much as possible.  Type checking libraries
like PyContracts (already used in edx-platform) or typing (a backport of the
type hinting system introduced in python 3.5) can help us ensure that callers
are using the appropriate variety of string.

[OPTION 1]

Because of the difficulty in mentally context switching between code that uses
unicode-by-default strings, and bytes-by-default strings in a single python 2
codebase, we do not advocate the use of `from __future__ import
unicode_literals`, but instead recommend using explicit `u'unicode'` and
`b'byte'` literals throughout. Bare native-string literals should be used
sparingly, and explicitly called out as intentional usages, whether with the

[OPTION 2]

In order to write code that looks as much like native python 3 as possible, we
advocate the use of `from __future__ import unicode_literals`, which makes bare
string literals like `'this'` create text strings (`unicode` objects), while
bytestrings (`bytes` objects) are created with b-prefixed string literals, such
as `b'this'`.  Native `str` objects do not exist in this system, but have wildly
inconsistent behavior anyway.  If they are needed for some reason, they should
be created as unicode objects and explicitly encoded for python 2.

[END OPTIONS]

The `unicode()` and `str()` constructors should be replaced by `six.text_type()`
and `six.binary_type()` respectively.

`six` has wrapper functions for most other incompatibilities, as well as imports
to normalize standard library imports.  If useful tools are missing from `six`,
we can create our own wrapper functions, but should consider submitting them
upstream to the six project to benefit other teams, if appropriate.

All greenfield python projects should be written using python 3 unless a
compelling reason (such as incompatible support libraries with no reasonable
alternative available) compels us to stick with python 2.  The exception to
this is new library code that needs to support both python 2 and 3.

The eventual goal is for all of our services to be deployed under python 3 or
replaced by newer services.  Open source libraries we maintain that are
generally useful beyond our services should be written primarily in python 3,
but maintain single-code-base compatibility with Python 2 until python 2 is
EOLed.

Changing Practice
-----------------

Changing internal code practices to ease conversion will require a
three-pronged approach of documentation, socialization, and tooling.  To start,
we need to update the official edX code style guide to mandate compatible code
practices.  To socialize these practices among our engineers, we will announce
our efforts to migrate to Python 3 during an engineering all-hands meeting,
offer a workshop in writing compatible code, and promote awareness of
incompatibilities during code reviews.  Additionally, we will host regular
Python 3 office hours to help answer questions and troubleshoot problems that
arise during migration.

Appropriate tooling will help.  Tests should be configured to run under both
python 2 or 3 (tox helps with this).  As it would double the cost of running
tests to run both all the time, we may only want to enable Python 3 tests in
the CI environment for repos that are actively being migrated.  We still want
to ensure that python 3 compatibility is improving on other projects, so a
lightweight metric that can be run every time would also be useful, such as
running pylint with the `caniusepython3` extension.  Making these checks
mandatory in a similar way to our current quality will ensure that
compatibility is improving (TODO: timeline for this?).

Migrating Code
--------------

We should be able to migrate individual applications to python 3 independently.
To begin with, we should pilot the process using a relatively small (but
complex enough to provide useful information) IDA.  As we go, we will document
the process, find pain points, figure out ways of dealing with them, and
continue to improve our process.

Order of migrations
-------------------

* IDAs that need future support
  * Old IDAs (that we want to replace) should not be upgraded, but we will need
    to prioritize replacement to occur during the migration timeframe.
* Implement remote execution of xBlocks (to allow a window of bicompatibility
  for external xblocks)
* edx-platform
  * Deploy xblocks separately to test remote execution
  * Migrate to python 3
  * Upgrade external xblocks as needed, and support partners who wish to do the
    same

Support libraries should be migrated as required by our migration schedule for
the services that require them.  If external libraries need minor updates to
support python 3 that we can perform, we should opt to push those changes
upstream rather than forking projects when possible.

Code conversion should be automated as much as possible.  The `future` library
includes a `futurize` script that will do much of the legwork.  As we gain
experience migrating code, we will develop a sense as to how aggressively we
can use `futurize`, and what other work needs to be done.

Deploying Services
------------------

Once a service has been achieved full python 3 compatibility, we will need to
coordinate deployment with devops. This should involve a final round of
verification that no bugs or performance regressions are introduced.

Devops may have input as to work that will need to be done before deployments
can happen.

Deprecating Python 2
--------------------

TBD: What support do partners and openedx users need?

Once a project has been converted to python 3 and deployed, and partners no
longer need the python 2 version supported, we will deprecating the python 2
version of the project. The first step is to document that the python 2 version
is no longer supported.  Then we can stop testing against python 2, and then we
can begin cleaning out compatibility code from the code base.

Open source libraries we maintain (that are useful beyond their integration
with our own projects) should continue to support python 2 until python 2 is
EOLed in 2020.

Strategy
========

TBD
